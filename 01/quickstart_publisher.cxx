//*****************************************************************************
//*    (c) 2005-2018 Copyright, Real-Time Innovations, All rights reserved.   *
//*                                                                           *
//*         Permission to modify and use for internal purposes granted.       *
//* This software is provided "as is", without warranty, express or implied.  *
//*                                                                           *
//*****************************************************************************

/* quickstart_publisher.cxx

A publication of data of type qs::qs_type

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++11 -example <arch> quickstart.idl

Example publication of type qs::qs_type automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
objs/<arch>/quickstart_subscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
objs/<arch>/quickstart_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/quickstart_publisher <domain_id> 
objs/<arch>/quickstart_subscriber <domain_id> 

On Windows:

objs\<arch>\quickstart_publisher <domain_id>  
objs\<arch>\quickstart_subscriber <domain_id>   
*/

#include <iostream>

#include <dds/pub/ddspub.hpp>
#include <rti/util/util.hpp> // for sleep()

#include "quickstart.hpp"

void publisher_main(int domain_id, int sample_count)
{
    // Create a DomainParticipant with default Qos
    dds::domain::DomainParticipant participant (domain_id);

    // Create a Topic -- and automatically register the type
    dds::topic::Topic<qs::qs_type> topic (participant, "Example qs_qs_type");

    // Create a DataWriter with default Qos (Publisher created in-line)
    dds::pub::DataWriter<qs::qs_type> writer(dds::pub::Publisher(participant), topic);

    qs::qs_type sample;
    for (int count = 0; count < sample_count || sample_count == 0; count++) {
        // Modify the data to be written here
        //LAB #1 - customize the sample data
        sample.name("Don Gochenour");
        sample.id(9017); 
        sample.value1(count);

        std::cout << "Writing qs::qs_type, count " << count << std::endl;
        writer.write(sample);

        // LAB #1 - shorten the sending period to 2s
        rti::util::sleep(dds::core::Duration(2));
    }
}

int main(int argc, char *argv[])
{

    int domain_id = 0;
    int sample_count = 0; // infinite loop

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    // To turn on additional logging, include <rti/config/Logger.hpp> and
    // uncomment the following line:
    // rti::config::Logger::instance().verbosity(rti::config::Verbosity::STATUS_ALL);

    try {
        publisher_main(domain_id, sample_count);
    } catch (const std::exception& ex) {
        // This will catch DDS exceptions
        std::cerr << "Exception in publisher_main(): " << ex.what() << std::endl;
        return -1;
    }

    // RTI Connext provides a finalize_participant_factory() method
    // if you want to release memory used by the participant factory singleton.
    // Uncomment the following line to release the singleton:
    //
    // dds::domain::DomainParticipant::finalize_participant_factory();

    return 0;
}

